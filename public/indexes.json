[
    {
        "t": "gpu",
        "p": "command/gpu.html",
        "d": "部件"
    },
    {
        "t": "pipline",
        "p": "command/pipline.html",
        "d": "渲染管线"
    },
    {
        "t": "properties",
        "p": "command/properties.html",
        "d": "shader属性"
    },
    {
        "t": "semantics",
        "p": "command/semantics.html",
        "d": "代码语义"
    },
    {
        "t": "tags",
        "p": "command/tags.html",
        "d": "tags"
    },
    {
        "t": "renderState",
        "p": "command/render-state.html",
        "d": "渲染状态类"
    },
    {
        "t": "compileDirectives",
        "p": "command/compile-directives.html",
        "d": "编译指令"
    },
    {
        "t": "transformations",
        "p": "command/transformations.html",
        "d": "矩阵变换"
    },
    {
        "t": "other",
        "p": "command/other.html",
        "d": "其它"
    },
    {
        "t": "buildlnVariables",
        "p": "command/buildln-variables.html",
        "d": "构建变量"
    },
    {
        "t": "predefinedMacros",
        "p": "command/predefined-macros.html",
        "d": "预定义宏"
    },
    {
        "t": "platformDifferences",
        "p": "command/platform-differences.html",
        "d": "平台差异化"
    },
    {
        "t": "math",
        "p": "command/math.html",
        "d": "数学"
    },
    {
        "t": "lighting",
        "p": "command/lighting.html",
        "d": "光照"
    },
    {
        "t": "miscellaneous",
        "p": "command/miscellaneous.html",
        "d": "杂项"
    },
    {
        "t": "errorDebug",
        "p": "command/error-debug.html",
        "d": "常见错误和警告"
    },
    {
        "t": "glsl",
        "p": "command/glsl.html",
        "d": "glsl基础类型"
    },
    {
        "t": "UNITY_INITIALIZE_OUTPUT(type,name)",
        "d": "由于HLSL编缉器不接受没有初始化的数据，所以为了支持所有平台，从而需要使用此方法进行初始化.",
        "p": "command/buildln-variables.html#UNITY_INITIALIZE_OUTPUT(type,name)"
    },
    {
        "t": "TRANSFORM_TEX(i.uv,_MainTex)",
        "d": "对UV进行Tiling与Offset变换",
        "p": "command/buildln-variables.html#TRANSFORM_TEX(i.uv,_MainTex)"
    },
    {
        "t": "float3 UnityWorldSpaceLightDir( float3 worldPos )",
        "d": "返回顶点到灯光的向量",
        "p": "command/buildln-variables.html#float3 UnityWorldSpaceLightDir( float3 worldPos )"
    },
    {
        "t": "Luminance(float rgb)",
        "d": "去色,内部公式为：dot(rgb,fixed3(0.22,0.707,0.071)).",
        "p": "command/buildln-variables.html#Luminance(float rgb)"
    },
    {
        "t": "_WorldSpaceCameraPos",
        "d": "主相机的世界坐标位置，类型：float3",
        "p": "command/buildln-variables.html#_WorldSpaceCameraPos"
    },
    {
        "t": "UnityWorldSpaceViewDir(i.worldPos)",
        "d": "世界空间下的相机方向(顶点到主相机)，类型：float3",
        "p": "command/buildln-variables.html#UnityWorldSpaceViewDir(i.worldPos)"
    },
    {
        "t": "深度:_CameraDepthTexture",
        "d": "1.在脚本中开启相机的深度:Camera.main.depthTextureMode = DepthTextureMode.Depth;\r\n      2.sampler2D_float _CameraDepthTexture;\r\n      3.float depth = LinearEyeDepth (SAMPLE_DEPTH_TEXTURE_PROJ(_CameraDepthTexture, UNITY_PROJ_COORD(i.projPos)));",
        "p": "command/buildln-variables.html#深度:_CameraDepthTexture"
    },
    {
        "t": "线性深度转换",
        "d": "从深度图中得到顶点的线性深度值(相机位置=0，相机远裁剪面=1)\r\n      Linear01Depth(depthMap, _ZBufferParams);\r\n      从深度图中得到顶点的线性深度值(不是0-1的范围)\r\n      LinearEyeDepth(depthMap, _ZBufferParams);",
        "p": "command/buildln-variables.html#线性深度转换"
    },
    {
        "t": "ComputeScreenPos(float4 pos)",
        "d": "pos为裁剪空间下的坐标位置，返回的是某个投影点下的屏幕坐标位置\r\n      由于这个函数返回的坐标值并未除以齐次坐标，所以如果直接使用函数的返回值的话，需要使用：tex2Dproj(_ScreenTexture, uv.xyw);\r\n      也可以自己处理其次坐标,使用：tex2D(_ScreenTexture, uv.xy / uv.w);",
        "p": "command/buildln-variables.html#ComputeScreenPos(float4 pos)"
    },
    {
        "t": "_ScreenParams",
        "d": "屏幕的相关参数，单位为像素。\r\n      x表示屏幕的宽度\r\n      y表示屏幕的高度\r\n      z表示1+1/屏幕宽度\r\n      w表示1+1/屏幕高度",
        "p": "command/buildln-variables.html#_ScreenParams"
    },
    {
        "t": "_Time",
        "d": "时间，主要用于在Shader做动画,类型：float4",
        "p": "command/buildln-variables.html#_Time"
    },
    {
        "t": "_SinTime",
        "d": "t是时间的正弦值，返回值(-1~1):",
        "p": "command/buildln-variables.html#_SinTime"
    },
    {
        "t": "_CosTime",
        "d": "t是时间的余弦值，返回值(-1~1):",
        "p": "command/buildln-variables.html#_CosTime"
    },
    {
        "t": "unity_DeltaTime",
        "d": "dt是时间增量,smoothDt是平滑时间",
        "p": "command/buildln-variables.html#unity_DeltaTime"
    },
    {
        "t": "_LightColor0",
        "d": "主平行灯的颜色值,rgb = 颜色x亮度; a = 亮度",
        "p": "command/buildln-variables.html#_LightColor0"
    },
    {
        "t": "_WorldSpaceLightPos0",
        "d": "平行灯: (xyz=位置,z=0))\r\n      其它类型灯: (xyz=位置,z=1)",
        "p": "command/buildln-variables.html#_WorldSpaceLightPos0"
    },
    {
        "t": "unity_WorldToLight",
        "d": "从世界空间转换到灯光空间下，等同于旧版的_LightMatrix0.",
        "p": "command/buildln-variables.html#unity_WorldToLight"
    },
    {
        "t": "unity_AmbientSky",
        "d": "环境光（Gradient）中的Sky Color.",
        "p": "command/buildln-variables.html#unity_AmbientSky"
    },
    {
        "t": "unity_AmbientEquator",
        "d": "环境光（Gradient）中的Equator Color.",
        "p": "command/buildln-variables.html#unity_AmbientEquator"
    },
    {
        "t": "unity_AmbientGround",
        "d": "环境光（Gradient）中的Ground Color.",
        "p": "command/buildln-variables.html#unity_AmbientGround"
    },
    {
        "t": "UNITY_LIGHTMODEL_AMBIENT",
        "d": "环境光(Color)中的颜色，等同于环境光（Gradient）中的Sky Color.",
        "p": "command/buildln-variables.html#UNITY_LIGHTMODEL_AMBIENT"
    },
    {
        "t": "实现步骤",
        "d": "用于对多个对象(网格一样，材质一样，但是材质属性不一样)合批,单个合批最大上限为511个对象.",
        "p": "command/buildln-variables.html#实现步骤"
    },
    {
        "t": "Instancing选项",
        "d": "对GPU Instancing进行一些设置",
        "p": "command/buildln-variables.html#Instancing选项"
    },
    {
        "t": "#pragma target 2.0",
        "d": "Shader编绎目标级别，默认值为2.5\r\n      可以通过#if (SHADER_TARGET &lt; 30)来做分支判断",
        "p": "command/compile-directives.html##pragma target 2.0"
    },
    {
        "t": "#pragma require xxx",
        "d": "表明shader需要的特性功能",
        "p": "command/compile-directives.html##pragma require xxx"
    },
    {
        "t": "#pragma shader_feature",
        "d": "变体声明，常用于不需要程序控制开关的关键字，在编缉器的材质上设置，打包时会自动过滤",
        "p": "command/compile-directives.html##pragma shader_feature"
    },
    {
        "t": "#pragma shader_feature_local",
        "d": "声明本地变体(shader_feature)，unity2019才支持的功能，每个Shader最多可以有64个本地变体，不占用全局变体的数量.",
        "p": "command/compile-directives.html##pragma shader_feature_local"
    },
    {
        "t": "#pragma multi_compile",
        "d": "变体声明，在打包时会把所有变体都打包进去，这是它与feature的区别.\r\n      定义关键字时如果加两个下划线，则表示定义一个空的变体，主要目的是为了节省关键字.\r\n      当使用shader变体时，记住在unity中全局关键字最多只有256个,而且在内部已经用了60个了,所以记得不要超标了.",
        "p": "command/compile-directives.html##pragma multi_compile"
    },
    {
        "t": "#pragma multi_compile_local",
        "d": "声明本地变体(multi_compile)，unity2019才支持的功能，每个Shader最多可以有64个本地变体，不占用全局变体的数量.",
        "p": "command/compile-directives.html##pragma multi_compile_local"
    },
    {
        "t": "#pragma multi_compile_fog",
        "d": "雾类型定义\r\n      FOG_EXP FOG_EXP2 FOG_LINEAR",
        "p": "command/compile-directives.html##pragma multi_compile_fog"
    },
    {
        "t": "#pragma multi_compile_fwdbase novertexlight nodynlightmap nodirlightmap",
        "d": "定义在LightMode = ForwardBase的Pass中,在此Pass中仅只持一个平行灯(逐像素)以及其它逐顶点灯和SH当照.这个指令的作用是一次性生成Unity在ForwardBase中需要的各种内置宏.",
        "p": "command/compile-directives.html##pragma multi_compile_fwdbase novertexlight nodynlightmap nodirlightmap"
    },
    {
        "t": "#pragma multi_compile_fwdadd",
        "d": "定义在LightMode=ForwardAdd的Pass中，在此Pass中用来计算其它的逐像素光照.而此指令的作用是一次性生成Unity在ForwardAdd中需要的各种内置宏.",
        "p": "command/compile-directives.html##pragma multi_compile_fwdadd"
    },
    {
        "t": "#pragma multi_compile_shadowcaster",
        "d": "定义在LightMode=ShadowCaster的Pass中，会自动生成两个宏:",
        "p": "command/compile-directives.html##pragma multi_compile_shadowcaster"
    },
    {
        "t": "#pragma skip_variants XXX01 XXX02...",
        "d": "剔除指定的变体，可同时剔除多个",
        "p": "command/compile-directives.html##pragma skip_variants XXX01 XXX02..."
    },
    {
        "t": "#pragma fragmentoption ARB_precision_hint_fastest",
        "d": "最快的,意思就是会用低精度(一般是指fp16),以提升片段着色器的运行速度,减少时间.",
        "p": "command/compile-directives.html##pragma fragmentoption ARB_precision_hint_fastest"
    },
    {
        "t": "#pragma fragmentoption ARB_precision_hint_nicest",
        "d": "最佳的,会用高精度(一般是指fp32),可能会降低运行速度,增加时间.",
        "p": "command/compile-directives.html##pragma fragmentoption ARB_precision_hint_nicest"
    },
    {
        "t": "#pragma enable_d3d11_debug_symbols",
        "d": "开启d3d11调试，加此命令后相关的名称与代码不会被剔除，便于在调试工具中进行查看分析",
        "p": "command/compile-directives.html##pragma enable_d3d11_debug_symbols"
    },
    {
        "t": "#pragma shader_feature EDITOR_VISUALIZATION",
        "d": "开启Material Validation,Scene视图中的模式，用于查看超出范围的像素颜色",
        "p": "command/compile-directives.html##pragma shader_feature EDITOR_VISUALIZATION"
    },
    {
        "t": "#pragma only_renderers",
        "d": "仅编译指定平台的Shader",
        "p": "command/compile-directives.html##pragma only_renderers"
    },
    {
        "t": "#pragma exclude_renderers",
        "d": "剔除掉指定平台的相关代码,列表参考上面",
        "p": "command/compile-directives.html##pragma exclude_renderers"
    },
    {
        "t": "#define NAME",
        "d": "定义一个叫NAME的字段，在CG代码中可以通过#if defined(NAME)来判断走不同的分支。",
        "p": "command/compile-directives.html##define NAME"
    },
    {
        "t": "#define NAME 1",
        "d": "定义一个叫NAME的字段并且它的值为1.",
        "p": "command/compile-directives.html##define NAME 1"
    },
    {
        "t": "#error xxx",
        "d": "多用于分支的判断中，利用此语句可直接输出一条报错信息，内容为xxx",
        "p": "command/compile-directives.html##error xxx"
    },
    {
        "t": "Did not find shader kernel 'frag'to compile at line",
        "d": "找不到片断着色器，检查下是否有正确编写片断着色器fragment.",
        "p": "command/error-debug.html#Did not find shader kernel 'frag'to compile at line"
    },
    {
        "t": "syntax error : unexpected token ')'at line",
        "d": "这一行存在语法错误,检测这行是否少了什么，如果没有看下它的前一句是否少了最后的分号.",
        "p": "command/error-debug.html#syntax error : unexpected token ')'at line"
    },
    {
        "t": "cannot implicitly convert from 'float2' to 'half4' at line",
        "d": "不能隐式的将float2转换成float4,需要手动补全，使等号两边分量数量一样才可以.",
        "p": "command/error-debug.html#cannot implicitly convert from 'float2' to 'half4' at line"
    },
    {
        "t": "invalid subscript 'xx' at line",
        "d": "无效的下标，通常是因为xx不存在或者xx的分量不存在导致的.",
        "p": "command/error-debug.html#invalid subscript 'xx' at line"
    },
    {
        "t": "undeclared identifier 'xx' at line",
        "d": "xx未定义.",
        "p": "command/error-debug.html#undeclared identifier 'xx' at line"
    },
    {
        "t": "unrecognized identifier 'xx' at line",
        "d": "xx未识别到.",
        "p": "command/error-debug.html#unrecognized identifier 'xx' at line"
    },
    {
        "t": "'xx':no matching 2 parameter intrinsic function",
        "d": "通常是因为xx方法后面括号内的参数不匹配(数量或者类型).",
        "p": "command/error-debug.html#'xx':no matching 2 parameter intrinsic function"
    },
    {
        "t": "comma expression used where a vector constructor may have been intended at line 48 (on d3d11)",
        "d": "逗号的使用场景不对，比如float4 a = (0,0,0,1);应该写成float4 a = float4(0,0,0,1);",
        "p": "command/error-debug.html#comma expression used where a vector constructor may have been intended at line 48 (on d3d11)"
    },
    {
        "t": "redefinition of 'xx' at xxx",
        "d": "xx被重复定义了，看下是否和引用的hlsl或者cginc中的重复了.",
        "p": "command/error-debug.html#redefinition of 'xx' at xxx"
    },
    {
        "t": "incorrect number of arguments to numeric-type constructor at line",
        "d": "通常是因为xx方法后面括号内的参数不匹配(数量或者类型).",
        "p": "command/error-debug.html#incorrect number of arguments to numeric-type constructor at line"
    },
    {
        "t": "implicit truncation of vector type at line xx (on d3d11)",
        "d": "最好不要隐式的截断向量,参数中需要几维就写几维.",
        "p": "command/error-debug.html#implicit truncation of vector type at line xx (on d3d11)"
    },
    {
        "t": "void",
        "d": "空类型，即不返回任何值.",
        "p": "command/glsl.html#void"
    },
    {
        "t": "bool",
        "d": "布尔类型，即真或者假,true false.",
        "p": "command/glsl.html#bool"
    },
    {
        "t": "int",
        "d": "带符号的整数.",
        "p": "command/glsl.html#int"
    },
    {
        "t": "float",
        "d": "带符号的浮点数.",
        "p": "command/glsl.html#float"
    },
    {
        "t": "vec2,vec3,vec4",
        "d": "n维浮点数向量.",
        "p": "command/glsl.html#vec2,vec3,vec4"
    },
    {
        "t": "bvec2,bvec3,bvec4",
        "d": "n维布尔向量.",
        "p": "command/glsl.html#bvec2,bvec3,bvec4"
    },
    {
        "t": "ivec2,ivec3,ivec4",
        "d": "n维向整数向量",
        "p": "command/glsl.html#ivec2,ivec3,ivec4"
    },
    {
        "t": "mat2,mat3,mat4",
        "d": "2x2,3x3,4x4浮点数矩阵.",
        "p": "command/glsl.html#mat2,mat3,mat4"
    },
    {
        "t": "sampler2D",
        "d": "2D纹理.",
        "p": "command/glsl.html#sampler2D"
    },
    {
        "t": "samplerCube",
        "d": "立方体纹理.",
        "p": "command/glsl.html#samplerCube"
    },
    {
        "t": "GPU",
        "d": "Graphic Processing Unit,简称GPU，中文翻译为图形处理器。",
        "p": "command/gpu.html#gpu"
    },
    {
        "t": "BIOS",
        "d": "BIOS是Basic Input Output System的简称，也就是基本输入输出系统。\r\n      显卡BIOS主要用于存放显示芯片与驱动程序之间的控制程序，另外还保存显卡的型号、规格、生产厂家以及出厂时间等信息。",
        "p": "command/gpu.html#BIOS"
    },
    {
        "t": "PCB",
        "d": "Printed Circuit Board,显卡PCB就是印制电路板，除了用于固定各种小零件外，PCB的主要功能是提供其上各项零件的相互电气连接。",
        "p": "command/gpu.html#PCB"
    },
    {
        "t": "晶振",
        "d": "Crystal，石英振荡器的简称，是时钟电路中最重要的部分。\r\n      显卡晶振为27MHz，其作用是向显卡各部分提供基准频率。晶振就像个标尽尺，工作频率不稳定会造成相关设备工作频率不稳定。",
        "p": "command/gpu.html#晶振"
    },
    {
        "t": "电容",
        "d": "在显卡上是两个直立的零件，电容对显卡主要起滤波和稳定电流的作用，只有在保证电流稳定的情况下，显卡才能正常的工作。",
        "p": "command/gpu.html#电容"
    },
    {
        "t": "显卡架构",
        "d": "就是指显示芯片各种处理单元的组成和工作模式，在参数相同的情况下，架构越先进，效率就越高，性能也就越强。\r\n      而同架构的显卡 最重要的指标由处理器数量、核芯频率、显存、位宽来决定。",
        "p": "command/gpu.html#显卡架构"
    },
    {
        "t": "核心频率",
        "d": "显卡的核心频率是指显示核心的工作频率。",
        "p": "command/gpu.html#核心频率"
    },
    {
        "t": "显存",
        "d": "显存也称为帧缓存，它的作用是用来存储显示芯片处理过的或者即将提取的渲染数据。我们在显示屏上看到的画面都是由一个个的像素点构成的，而每个像素点都是以4~64bit的数据来控制亮度和色彩的，这些数据必须通过显存来保存，并交由显示芯片和CPU调配，才能把运算结果转化为图像输出到显示器上。",
        "p": "command/gpu.html#显存"
    },
    {
        "t": "显存位宽",
        "d": "显存位宽是显存在一个时钟周期内所能传送数据的位数，位数越大则瞬间能传输的数据量就越大。\r\n      显存带宽=显存频率X显存位宽÷8\r\n      举例：500MHzx256bit÷8=16GB/s",
        "p": "command/gpu.html#显存位宽"
    },
    {
        "t": "显存速度",
        "d": "显存速度一般以ns（纳秒）为单位。常用的显存速度有7ns、5ns、1.1ns等，越小速度越快，性能越好。",
        "p": "command/gpu.html#显存速度"
    },
    {
        "t": "显存频率",
        "d": "显存频率在一定程度上反应着显存的速度，以MHz（兆赫兹）为单位。显存频率与显存时钟周期是相关的，二者成倒数关系：\r\n      显存频率=1÷显存时钟周期",
        "p": "command/gpu.html#显存频率"
    },
    {
        "t": "使用切线空间下的法线",
        "d": "1.appdata中定义NORMAL与TANGENT语义.\r\n      2.v2f中声明三个变量用于组成成切线空间下的旋转矩阵.</p>\r\n    <pre><code class=\"language-c_cpp\"><div class='ace-tm'><div class='ace_static_highlight' style='counter-reset:ace_line 0'><div class='ace_line'><span class='ace_identifier'>float3</span> <span class='ace_identifier'>tSpace0</span><span class='ace_punctuation ace_operator'>:</span><span class='ace_identifier'>TEXCOORD3</span><span class='ace_punctuation ace_operator'>;</span>\r\n</div><div class='ace_line'><span class='ace_identifier'>float3</span> <span class='ace_identifier'>tSpace1</span><span class='ace_punctuation ace_operator'>:</span><span class='ace_identifier'>TEXCOORD4</span><span class='ace_punctuation ace_operator'>;</span>\r\n</div><div class='ace_line'><span class='ace_identifier'>float3</span> <span class='ace_identifier'>tSpace2</span><span class='ace_punctuation ace_operator'>:</span><span class='ace_identifier'>TEXCOORD5</span><span class='ace_punctuation ace_operator'>;</span>\r\n</div></div></div></code></pre>\r\n    <p>3.在顶点着色器中执行:</p>\r\n    <pre><code class=\"language-c_cpp\"><div class='ace-tm'><div class='ace_static_highlight' style='counter-reset:ace_line 0'><div class='ace_line'><span class='ace_identifier'>half3</span> <span class='ace_identifier'>worldTangent</span> <span class='ace_keyword ace_operator'>=</span> <span class='ace_identifier'>UnityObjectToWorldDir</span><span class='ace_paren ace_lparen'>(</span><span class='ace_identifier'>v</span><span class='ace_punctuation ace_operator'>.</span><span class='ace_identifier'>tangent</span><span class='ace_paren ace_rparen'>)</span><span class='ace_punctuation ace_operator'>;</span>\r\n</div><div class='ace_line'><span class='ace_identifier'>fixed</span> <span class='ace_identifier'>tangentSign</span> <span class='ace_keyword ace_operator'>=</span> <span class='ace_identifier'>v</span><span class='ace_punctuation ace_operator'>.</span><span class='ace_identifier'>tangent</span><span class='ace_punctuation ace_operator'>.</span><span class='ace_identifier'>w</span> <span class='ace_keyword ace_operator'>*</span> <span class='ace_identifier'>unity_WorldTransformParams</span><span class='ace_punctuation ace_operator'>.</span><span class='ace_identifier'>w</span><span class='ace_punctuation ace_operator'>;</span>\r\n</div><div class='ace_line'><span class='ace_identifier'>half3</span> <span class='ace_identifier'>worldBinormal</span> <span class='ace_keyword ace_operator'>=</span> <span class='ace_identifier'>cross</span><span class='ace_paren ace_lparen'>(</span><span class='ace_identifier'>o</span><span class='ace_punctuation ace_operator'>.</span><span class='ace_identifier'>worldNormal</span><span class='ace_punctuation ace_operator'>,</span> <span class='ace_identifier'>worldTangent</span><span class='ace_paren ace_rparen'>)</span> <span class='ace_keyword ace_operator'>*</span> <span class='ace_identifier'>tangentSign</span><span class='ace_punctuation ace_operator'>;</span>\r\n</div><div class='ace_line'><span class='ace_identifier'>o</span><span class='ace_punctuation ace_operator'>.</span><span class='ace_identifier'>tSpace0</span> <span class='ace_keyword ace_operator'>=</span> <span class='ace_identifier'>float3</span><span class='ace_paren ace_lparen'>(</span><span class='ace_identifier'>worldTangent</span><span class='ace_punctuation ace_operator'>.</span><span class='ace_identifier'>x</span><span class='ace_punctuation ace_operator'>,</span><span class='ace_identifier'>worldBinormal</span><span class='ace_punctuation ace_operator'>.</span><span class='ace_identifier'>x</span><span class='ace_punctuation ace_operator'>,</span><span class='ace_identifier'>o</span><span class='ace_punctuation ace_operator'>.</span><span class='ace_identifier'>worldNormal</span><span class='ace_punctuation ace_operator'>.</span><span class='ace_identifier'>x</span><span class='ace_paren ace_rparen'>)</span><span class='ace_punctuation ace_operator'>;</span>\r\n</div><div class='ace_line'><span class='ace_identifier'>o</span><span class='ace_punctuation ace_operator'>.</span><span class='ace_identifier'>tSpace1</span> <span class='ace_keyword ace_operator'>=</span> <span class='ace_identifier'>float3</span><span class='ace_paren ace_lparen'>(</span><span class='ace_identifier'>worldTangent</span><span class='ace_punctuation ace_operator'>.</span><span class='ace_identifier'>y</span><span class='ace_punctuation ace_operator'>,</span><span class='ace_identifier'>worldBinormal</span><span class='ace_punctuation ace_operator'>.</span><span class='ace_identifier'>y</span><span class='ace_punctuation ace_operator'>,</span><span class='ace_identifier'>o</span><span class='ace_punctuation ace_operator'>.</span><span class='ace_identifier'>worldNormal</span><span class='ace_punctuation ace_operator'>.</span><span class='ace_identifier'>y</span><span class='ace_paren ace_rparen'>)</span><span class='ace_punctuation ace_operator'>;</span>\r\n</div><div class='ace_line'><span class='ace_identifier'>o</span><span class='ace_punctuation ace_operator'>.</span><span class='ace_identifier'>tSpace2</span> <span class='ace_keyword ace_operator'>=</span> <span class='ace_identifier'>float3</span><span class='ace_paren ace_lparen'>(</span><span class='ace_identifier'>worldTangent</span><span class='ace_punctuation ace_operator'>.</span><span class='ace_identifier'>z</span><span class='ace_punctuation ace_operator'>,</span><span class='ace_identifier'>worldBinormal</span><span class='ace_punctuation ace_operator'>.</span><span class='ace_identifier'>z</span><span class='ace_punctuation ace_operator'>,</span><span class='ace_identifier'>o</span><span class='ace_punctuation ace_operator'>.</span><span class='ace_identifier'>worldNormal</span><span class='ace_punctuation ace_operator'>.</span><span class='ace_identifier'>z</span><span class='ace_paren ace_rparen'>)</span><span class='ace_punctuation ace_operator'>;</span>\r\n</div></div></div></code></pre>\r\n    <p>4.在片断着色器中计算出世界空间下的法线,然后再拿去进行需要的计算:",
        "p": "command/lighting.html#使用切线空间下的法线"
    },
    {
        "t": "Lambertian",
        "d": "",
        "p": "command/lighting.html#Lambertian"
    },
    {
        "t": "Phong",
        "d": "",
        "p": "command/lighting.html#Phong"
    },
    {
        "t": "Blinn-Phong",
        "d": "",
        "p": "command/lighting.html#Blinn-Phong"
    },
    {
        "t": "Disney Principled BRDF",
        "d": "",
        "p": "command/lighting.html#Disney Principled BRDF"
    },
    {
        "t": "生成阴影",
        "d": "添加&quot;LightMode&quot; = &quot;ShadowCaster&quot;的Pass.",
        "p": "command/lighting.html#生成阴影"
    },
    {
        "t": "采样阴影",
        "d": "",
        "p": "command/lighting.html#采样阴影"
    },
    {
        "t": "产生间接光照",
        "d": "添加&quot;LightMode&quot; = &quot;Meta&quot;的Pass.\r\n      可参考内置Shader中的Meta Pass.</p>\r\n    <h2>Light Probe 光照探针</h2>\r\n    <h3>规则01</h3>\r\n    <p>当逐像素平行灯标记为Mixed时,同时场景内有LightProbe时,那么当前平行灯的光照值会自动被LightProbe影响,所以不管物体Shader中是否有SH相关的运算,都会受到LightProbe的影响.",
        "p": "command/lighting.html#产生间接光照"
    },
    {
        "t": "规则02",
        "d": "当逐像素平行灯标记为Baked时,同时场景内有LightProbe时,那么需要自行在物体Shader中添加SH相关的运算,才会受到LightProbe的影响.",
        "p": "command/lighting.html#规则02"
    },
    {
        "t": "反射探针的采样",
        "d": "反射探针中当前激活的CubeMap存储在unity_SpecCube0当中，必须要用UNITY_SAMPLE_TEXCUBE进行采样，然后需要对其进行解码",
        "p": "command/lighting.html#反射探针的采样"
    },
    {
        "t": "unity_FogColor",
        "d": "内置雾效颜色值",
        "p": "command/lighting.html#unity_FogColor"
    },
    {
        "t": "方案一:",
        "d": "常规方案",
        "p": "command/lighting.html#方案一:"
    },
    {
        "t": "方案二:",
        "d": "当在v2f中有定义worldPos时,可以把worldPos.w利用起来做为雾效值.",
        "p": "command/lighting.html#方案二:"
    },
    {
        "t": "abs (x)",
        "d": "取绝对值，即正值返回正值，负值返回的还是正值,x值也可以为向量",
        "p": "command/math.html#abs (x)"
    },
    {
        "t": "acos (x)",
        "d": "反余切函数,输入参数范围为[-1, 1],返回[0, π] 区间的角度值",
        "p": "command/math.html#acos (x)"
    },
    {
        "t": "all (a)",
        "d": "当a或a的所有分量都为true或者非0时返回1(true),否则返回0(false).",
        "p": "command/math.html#all (a)"
    },
    {
        "t": "any (a)",
        "d": "如果a=0或者a中的所有分量为0，则返回0(false);否则返回1(true).",
        "p": "command/math.html#any (a)"
    },
    {
        "t": "asin (x)",
        "d": "返回x的反正弦值,范围为(-π/2,π/2)",
        "p": "command/math.html#asin (x)"
    },
    {
        "t": "atan2 (y,x)",
        "d": "返回y/x的反正切值",
        "p": "command/math.html#atan2 (y,x)"
    },
    {
        "t": "atan (x)",
        "d": "返回x的反正切值,范围为(-π/2,π/2),表示弧度",
        "p": "command/math.html#atan (x)"
    },
    {
        "t": "ceil (x)",
        "d": "对x进行向上取整，即x=0.1返回1，x=1.5返回2，x=-0.3返回0",
        "p": "command/math.html#ceil (x)"
    },
    {
        "t": "clamp(x,a,b)",
        "d": "如果 x 值小于 a，则返回 a;如果 x 值大于 b,返回 ;否则，返回 x.",
        "p": "command/math.html#clamp(x,a,b)"
    },
    {
        "t": "clip (x)",
        "d": "如果x&lt;0则裁剪掉此片断",
        "p": "command/math.html#clip (x)"
    },
    {
        "t": "cosh (x)",
        "d": "双曲余弦函数",
        "p": "command/math.html#cosh (x)"
    },
    {
        "t": "cross (a,b)",
        "d": "返回两个三维向量a与b的叉积",
        "p": "command/math.html#cross (a,b)"
    },
    {
        "t": "degrees (x)",
        "d": "将x从弧度转换成角度",
        "p": "command/math.html#degrees (x)"
    },
    {
        "t": "determinant (M)",
        "d": "返回方阵M的行列式,注意只有方阵才有行列式",
        "p": "command/math.html#determinant (M)"
    },
    {
        "t": "dot (a,b)",
        "d": "点乘，a和b可以为标量也可以为向量,其计算结果是两个向量夹角的余弦值，相当于|a|<em>|b|<em>cos(θ)或者a.x</em>b.x+a.y</em>b.y+a.z*b.z\r\n      a和b的位置无所谓前后，结果都是一样的。",
        "p": "command/math.html#dot (a,b)"
    },
    {
        "t": "distance (a,b)",
        "d": "返回a,b间的距离.",
        "p": "command/math.html#distance (a,b)"
    },
    {
        "t": "exp(x)",
        "d": "计算e的x次方，e = 2.71828182845904523536",
        "p": "command/math.html#exp(x)"
    },
    {
        "t": "exp2 (x)",
        "d": "计算2的x次方",
        "p": "command/math.html#exp2 (x)"
    },
    {
        "t": "floor (x)",
        "d": "对x值进行向下取整(去尾求整)\r\n      比如:floor (0.6) = 0.0,floor (-0.6) = -1.0",
        "p": "command/math.html#floor (x)"
    },
    {
        "t": "fmod (x,y)",
        "d": "返回x/y的余数。如果y为0，结果不可预料,注意！如果x为负值，返回的结果也是负值！",
        "p": "command/math.html#fmod (x,y)"
    },
    {
        "t": "frac (x)",
        "d": "返回x的小数部分",
        "p": "command/math.html#frac (x)"
    },
    {
        "t": "length (v)",
        "d": "返回一个向量的模，即 sqrt(dot(v,v))",
        "p": "command/math.html#length (v)"
    },
    {
        "t": "lerp (A,B,alpha)",
        "d": "线性插值.\r\n      如果alpha=0，则返回A;\r\n      如果alpha=1，则返回B;\r\n      否则返回A与B的混合值;内部执行:A + alpha*(B-A)",
        "p": "command/math.html#lerp (A,B,alpha)"
    },
    {
        "t": "log (x)",
        "d": "返回x的自然对数",
        "p": "command/math.html#log (x)"
    },
    {
        "t": "max (a,b)",
        "d": "比较两个标量或等长向量元素，返回最大值",
        "p": "command/math.html#max (a,b)"
    },
    {
        "t": "min (a,b)",
        "d": "比较两个标量或等长向量元素，返回最小值",
        "p": "command/math.html#min (a,b)"
    },
    {
        "t": "mul (M,V)",
        "d": "表示矩阵M与向量V进行点乘，结果就是对向量V进行M矩阵变换后的值",
        "p": "command/math.html#mul (M,V)"
    },
    {
        "t": "normalize (v)",
        "d": "返回一个向量的归一化版本(方向一样，但是模为1)\r\n      normalize(v) = rsqrt(dot(v,v))*v; rsqrt返回的是平方根的倒数",
        "p": "command/math.html#normalize (v)"
    },
    {
        "t": "pow (x,y)",
        "d": "返回x的y次方",
        "p": "command/math.html#pow (x,y)"
    },
    {
        "t": "reflect(I, N)",
        "d": "根据入射光方向向量 I ，和顶点法向量 N ，计算反射光方向向量。其中 I 和 N 必须被归一化，需要非常注意的是，这个 I 是指向顶点的；函数只对三元向量有效。",
        "p": "command/math.html#reflect(I, N)"
    },
    {
        "t": "refract(I,N,eta)",
        "d": "计算折射向量， I 为入射光线， N 为法向量， eta 为折射系数；其中 I 和 N 必须被归一化，如果 I 和 N 之间的夹角太大，则返回（ 0 ， 0 ， 0 ），也就是没有折射光线； I\r\n      是指向顶点的；函数只对三元向量有效。",
        "p": "command/math.html#refract(I,N,eta)"
    },
    {
        "t": "round (x)",
        "d": "返回x四舍五入的值",
        "p": "command/math.html#round (x)"
    },
    {
        "t": "rsqrt (x)",
        "d": "返回x的平方根倒数,注意x不能为0.相当于 pow(x, -0.5)",
        "p": "command/math.html#rsqrt (x)"
    },
    {
        "t": "saturate (x)",
        "d": "如果x&lt;0返回0,如果x&gt;1返回1,否则返回x.",
        "p": "command/math.html#saturate (x)"
    },
    {
        "t": "sqrt (x)",
        "d": "返回x的平方根.",
        "p": "command/math.html#sqrt (x)"
    },
    {
        "t": "step (a,b)",
        "d": "如果a&lt;b返回1,否则返回0.",
        "p": "command/math.html#step (a,b)"
    },
    {
        "t": "sign (x)",
        "d": "如果x=0返回0,如果x&gt;0返回1,如果x&lt;0返回-1.",
        "p": "command/math.html#sign (x)"
    },
    {
        "t": "smoothstep (min,max,x)",
        "d": "如果 x 比min 小，返回 0\r\n      如果 x 比max 大，返回 1\r\n      如果 x 处于范围 [min，max]中，则返回 0 和 1 之间的值(按值在min和max间的比例).\r\n      如果只想要线性过渡，并不需要平滑的话，可以直接使用saturate((x - min)/(max - min))",
        "p": "command/math.html#smoothstep (min,max,x)"
    },
    {
        "t": "tex1D(samper1D tex,float s)",
        "d": "一维纹理采样",
        "p": "command/math.html#tex1D(samper1D tex,float s)"
    },
    {
        "t": "tex2D(samper2D tex,float2 s)",
        "d": "二维纹理采样",
        "p": "command/math.html#tex2D(samper2D tex,float2 s)"
    },
    {
        "t": "tex2Dlod(samper2D tex,float4 s)",
        "d": "二维纹理采样,s.w表示采样的是mipmap的几级,仅在ES3.0以上支持.",
        "p": "command/math.html#tex2Dlod(samper2D tex,float4 s)"
    },
    {
        "t": "tex2DProj(samper2D tex,float4 s)",
        "d": "二维投影纹理采样",
        "p": "command/math.html#tex2DProj(samper2D tex,float4 s)"
    },
    {
        "t": "texCUBE(samperCUBE tex,float3 s)",
        "d": "立方体纹理采样",
        "p": "command/math.html#texCUBE(samperCUBE tex,float3 s)"
    },
    {
        "t": "mov dest, src1",
        "d": "",
        "p": "command/math.html#mov dest, src1"
    },
    {
        "t": "add dest, src1, src2",
        "d": "",
        "p": "command/math.html#add dest, src1, src2"
    },
    {
        "t": "mul dest, src1, src2",
        "d": "",
        "p": "command/math.html#mul dest, src1, src2"
    },
    {
        "t": "div dest, src1, src2",
        "d": "",
        "p": "command/math.html#div dest, src1, src2"
    },
    {
        "t": "mad dest, src1, src2 , src3",
        "d": "",
        "p": "command/math.html#mad dest, src1, src2 , src3"
    },
    {
        "t": "dp2 dest, src1, src2",
        "d": "",
        "p": "command/math.html#dp2 dest, src1, src2"
    },
    {
        "t": "dp3 dest, src1, src2",
        "d": "",
        "p": "command/math.html#dp3 dest, src1, src2"
    },
    {
        "t": "dp4 dest, src1, src2",
        "d": "",
        "p": "command/math.html#dp4 dest, src1, src2"
    },
    {
        "t": "rsq dest, src1",
        "d": "",
        "p": "command/math.html#rsq dest, src1"
    },
    {
        "t": "UV重映射到中心位置",
        "d": "将UV值重映射为(-1,-1)~(1,1)，也就是将UV的中心点从左下角移动到中间位置。",
        "p": "command/miscellaneous.html#UV重映射到中心位置"
    },
    {
        "t": "画圆",
        "d": "利用UV来画圆，通过_Radius来调节大小，_CircleFade来调节边缘虚化程序。",
        "p": "command/miscellaneous.html#画圆"
    },
    {
        "t": "画矩形",
        "d": "利用UV来画矩形，_Width调节宽度，_Height调节高度，_RectangleFade调节边缘虚化度。",
        "p": "command/miscellaneous.html#画矩形"
    },
    {
        "t": "黑白棋盘格",
        "d": "",
        "p": "command/miscellaneous.html#黑白棋盘格"
    },
    {
        "t": "极坐标",
        "d": "利用UV来实现极坐标.",
        "p": "command/miscellaneous.html#极坐标"
    },
    {
        "t": "将0-1的值控制在某个自定义的区间内",
        "d": "比如frac(i.uv*3.33+3.33);就是将0-1的uv值重新定义为0.33-0.66",
        "p": "command/miscellaneous.html#将0-1的值控制在某个自定义的区间内"
    },
    {
        "t": "随机",
        "d": "",
        "p": "command/miscellaneous.html#随机"
    },
    {
        "t": "旋转",
        "d": "",
        "p": "command/miscellaneous.html#旋转"
    },
    {
        "t": "序列图",
        "d": "splitUV是把原有的UV重新定位到左上角的第一格UV上，_Sequence.xy表示的是纹理是由几x几的格子组成的,_Sequence.z表示的是走序列的快慢.",
        "p": "command/miscellaneous.html#序列图"
    },
    {
        "t": "HSV2RGB方法01",
        "d": "",
        "p": "command/miscellaneous.html#HSV2RGB方法01"
    },
    {
        "t": "HSV2RGB方法02(更优化)",
        "d": "",
        "p": "command/miscellaneous.html#HSV2RGB方法02(更优化)"
    },
    {
        "t": "模型中心点坐标",
        "d": "在Shader中获取当前模型的中心点，其实就是将(0,0,0)点从本地转换到世界空间坐标下即可，在制作对象从下往之类的效果时常用到。",
        "p": "command/miscellaneous.html#模型中心点坐标"
    },
    {
        "t": "BillBoard",
        "d": "",
        "p": "command/miscellaneous.html#BillBoard"
    },
    {
        "t": "网格阴影",
        "d": "",
        "p": "command/miscellaneous.html#网格阴影"
    },
    {
        "t": "菲涅尔",
        "d": "",
        "p": "command/miscellaneous.html#菲涅尔"
    },
    {
        "t": "XRay射线",
        "d": "",
        "p": "command/miscellaneous.html#XRay射线"
    },
    {
        "t": "CGPROGRAM/ENDCG",
        "d": "cg代码的开始与结束.",
        "p": "command/other.html#CGPROGRAM/ENDCG"
    },
    {
        "t": "CGINCLUDE/ENDCG",
        "d": "通常用于定义多段vert/frag函数，然后这段CG代码会插入到所有Pass的CG中，根据当前Pass的设置来选择加载.",
        "p": "command/other.html#CGINCLUDE/ENDCG"
    },
    {
        "t": "Category{}",
        "d": "定义一组所有SubShader共享的命令，位于SubShader外面。",
        "p": "command/other.html#Category{}"
    },
    {
        "t": "LOD",
        "d": "Shader LOD，可利用脚本来控制LOD级别，通常用于不同配置显示不同的SubShader。",
        "p": "command/other.html#LOD"
    },
    {
        "t": "Fallback &quot;name&quot;",
        "d": "备胎，当Shader中没有任何SubShader可执行时，则执行FallBack。默认值为Off,表示没有备胎。\r\n      示例:FallBack &quot;Diffuse&quot;",
        "p": "command/other.html#Fallback &quot;name&quot;"
    },
    {
        "t": "CustomEditor &quot;name&quot;",
        "d": "自定义材质面板，name为自定义的脚本名称。可利用此功能对材质面板进行个性化自定义。",
        "p": "command/other.html#CustomEditor &quot;name&quot;"
    },
    {
        "t": "Name &quot;MyPassName&quot;",
        "d": "给当前Pass指定名称，以便利用UsePass进行调用。",
        "p": "command/other.html#Name &quot;MyPassName&quot;"
    },
    {
        "t": "UsePass &quot;Shader/NAME&quot;",
        "d": "调用其它Shader中的Pass，注意Pass的名称要全部大写！Shader的路径也要写全，以便能找到具体是哪个Shader的哪个Pass。另外加了UsePass后，也要注意相应的Properties要自行添加。",
        "p": "command/other.html#UsePass &quot;Shader/NAME&quot;"
    },
    {
        "t": "GrabPass",
        "d": "GrabPass{} 抓取当前屏幕存储到_GrabTexture中，每个有此命令的Shader都会每帧执行。\r\n      GrabPass { &quot;TextureName&quot; } 抓取当前屏幕存储到自定义的TextureName中，每帧中只有第一个拥有此命令的Shader执行一次。\r\n      GrabPass也支持Name与Tags。",
        "p": "command/other.html#GrabPass"
    },
    {
        "t": "Application Stage",
        "d": "此阶段一般由CPU将需要在屏幕上绘制的几何体、摄像机位置、光照纹理等输出到管线的几何阶段.",
        "p": "command/pipline.html#Application Stage"
    },
    {
        "t": "模型和视图变换（Model and View Transform）",
        "d": "模型和视图变换阶段分为模型变换和视图变换.\r\n      模型变换的目的是将模型从本地空间变换到世界空间当中，而视图变换的目的是将摄像机放置于坐标原点（以使裁剪和投影操作更简单高效），将模型从世界空间变换到相机空间，以便后续步骤的操作。",
        "p": "command/pipline.html#模型和视图变换（Model and View Transform）"
    },
    {
        "t": "顶点着色（Vertex Shading）",
        "d": "顶点着色阶段的目的在于确定模型上顶点处的光照效果,其输出结果（颜色、向量、纹理坐标等）会被发送到光栅化阶段以进行插值操作。",
        "p": "command/pipline.html#顶点着色（Vertex Shading）"
    },
    {
        "t": "几何、曲面细分着色器",
        "d": "【可选项】分为几何着色器(Geometry Shader)和曲面细分着色器(Tessellation Shader)，主要是对顶点进行增加与删除修改等操作.",
        "p": "command/pipline.html#几何、曲面细分着色器"
    },
    {
        "t": "投影（Projection）",
        "d": "投影阶段分为正交投影与透视投影.\r\n      投影其实就是矩阵变换，最终会使坐标位于归一化的设备坐标NDC中，之所以叫投影就是因为最终Z轴坐标将被舍弃，也就是说此阶段主要的目的是将模型从三维空间投射到了二维的空间中的过程（但是坐标仍然是三维的，只是显示上看是二维的）。",
        "p": "command/pipline.html#投影（Projection）"
    },
    {
        "t": "裁剪（Clipping）",
        "d": "裁剪根据图元在视体的位置分为三种情况：</p>\r\n    <ol>\r\n      <li>当图元完全位于视体内部，那么它可以直接进行下一个阶段。</li>\r\n      <li>当图元完全位于视体外部，则不会进入下一个阶段，直接丢弃。</li>\r\n      <li>当图元部分位于视体内部，则需要对位于视体内的图元进行裁剪处理。</li>\r\n    </ol>\r\n    <p>最终的目的就是对部分位于视体内部的图元进行裁剪操作，以使处于视体外部不需要渲染的图元进行裁剪丢弃。",
        "p": "command/pipline.html#裁剪（Clipping）"
    },
    {
        "t": "屏幕映射（Screen Mapping）",
        "d": "屏幕映射阶段的主要目的，是将之前步骤得到的坐标映射到对应的屏幕坐标系上。",
        "p": "command/pipline.html#屏幕映射（Screen Mapping）"
    },
    {
        "t": "三角形设定（Triangle Setup）",
        "d": "此阶段将进行逐像素遍历检查操作，以检查出该像素是否被上一步得到的三角形所覆盖，这个查找过程被称为三角形遍历.",
        "p": "command/pipline.html#三角形设定（Triangle Setup）"
    },
    {
        "t": "像素着色(Pixel Shading)",
        "d": "对应于ShaderLab中的frag函数,主要目的是定义像素的最终输出颜色.",
        "p": "command/pipline.html#像素着色(Pixel Shading)"
    },
    {
        "t": "混合（Merging）",
        "d": "主要任务是合成当前储存于缓冲器中的由之前的像素着色阶段产生的片段颜色。此阶段还负责可见性问题（深度测试、模版测试等）的处理.",
        "p": "command/pipline.html#混合（Merging）"
    },
    {
        "t": "appdata",
        "d": "将应用程序阶段的内容传递到顶点着色器中.",
        "p": "command/pipline.html#appdata"
    },
    {
        "t": "vertex(顶点着色器)",
        "d": "本地空间&gt;(本地到世界空间矩阵)&gt;世界空间&gt;(世界到观察空间矩阵)&gt;观察空间&gt;(投影矩阵)&gt;齐次裁剪空间",
        "p": "command/pipline.html#vertex(顶点着色器)"
    },
    {
        "t": "透视除法",
        "d": "齐次裁剪空间作透视除法(clip.xyzw/clip.w)，变换到归一化设备坐标NDC.",
        "p": "command/pipline.html#透视除法"
    },
    {
        "t": "视口变换",
        "d": "从NDC坐标变换到屏幕坐标.",
        "p": "command/pipline.html#视口变换"
    },
    {
        "t": "fragment(片断着色器)",
        "d": "用从顶点着色器的输出来当输入进行逐片断的颜色计算并输出.",
        "p": "command/pipline.html#fragment(片断着色器)"
    },
    {
        "t": "OpenGL",
        "d": "裁剪空间下坐标范围(-1,1)",
        "p": "command/platform-differences.html#OpenGL"
    },
    {
        "t": "DirectX",
        "d": "裁剪空间下坐标范围(1,0)",
        "p": "command/platform-differences.html#DirectX"
    },
    {
        "t": "UNITY_NEAR_CLIP_VALUE",
        "d": "裁剪空间下的近剪裁值,(DX为1,OpenGL为-1).",
        "p": "command/platform-differences.html#UNITY_NEAR_CLIP_VALUE"
    },
    {
        "t": "Reversed direction(反向方向)",
        "d": "DirectX 11、DirectX 12、PS4、Xbox One、Metal这些平台都属于反向方向.\r\n      深度值从近裁剪面到远裁剪面的值为[1 ~ 0]\r\n      裁剪空间下的Z轴范围为[near,0]",
        "p": "command/platform-differences.html#Reversed direction(反向方向)"
    },
    {
        "t": "Traditional direction(传统方向)",
        "d": "除以上反向方向的平台以外都属于传统方向.\r\n      深度值从近裁剪面到远裁剪面的值为[0 ~ 1]\r\n      裁剪空间下的Z轴范围为:\r\n      DX平台=[0,far]\r\n      OpenGL平台=[-near,far]",
        "p": "command/platform-differences.html#Traditional direction(传统方向)"
    },
    {
        "t": "UNITY_REVERSED_Z",
        "d": "判断当前平台是否开启ReversedZ",
        "p": "command/platform-differences.html#UNITY_REVERSED_Z"
    },
    {
        "t": "SystemInfo.usesReversedZBuffer",
        "d": "利用C#判断当前平台是否支持ReversedZ",
        "p": "command/platform-differences.html#SystemInfo.usesReversedZBuffer"
    },
    {
        "t": "SHADER_API_D3D11",
        "d": "Direct3D 11",
        "p": "command/predefined-macros.html#SHADER_API_D3D11"
    },
    {
        "t": "SHADER_API_GLCORE",
        "d": "桌面OpenGL核心(GL3/4)",
        "p": "command/predefined-macros.html#SHADER_API_GLCORE"
    },
    {
        "t": "SHADER_API_GLES",
        "d": "OpenGl ES 2.0",
        "p": "command/predefined-macros.html#SHADER_API_GLES"
    },
    {
        "t": "SHADER_API_GLES3",
        "d": "OpenGl ES 3.0/3.1",
        "p": "command/predefined-macros.html#SHADER_API_GLES3"
    },
    {
        "t": "SHADER_API_METAL",
        "d": "IOS/Mac Metal",
        "p": "command/predefined-macros.html#SHADER_API_METAL"
    },
    {
        "t": "SHADER_API_VULKAN",
        "d": "Vulkan",
        "p": "command/predefined-macros.html#SHADER_API_VULKAN"
    },
    {
        "t": "SHADER_API_D3D11_9X",
        "d": "IOS/Mac Metal",
        "p": "command/predefined-macros.html#SHADER_API_D3D11_9X"
    },
    {
        "t": "SHADER_API_PS4",
        "d": "PS4平台,SHADER_API_PSSL同时也会被定义",
        "p": "command/predefined-macros.html#SHADER_API_PS4"
    },
    {
        "t": "SHADER_API_XBOXONE",
        "d": "Xbox One",
        "p": "command/predefined-macros.html#SHADER_API_XBOXONE"
    },
    {
        "t": "SHADER_API_MOBILE",
        "d": "所有移动平台(GLES/GLES3/METAL)",
        "p": "command/predefined-macros.html#SHADER_API_MOBILE"
    },
    {
        "t": "#if SHADER_TARGET &lt; 30",
        "d": "对应于#pragma target的值,2.0就是20,3.0就是30",
        "p": "command/predefined-macros.html##if SHADER_TARGET &lt; 30"
    },
    {
        "t": "#if UNITY_VERSION &gt;= 500",
        "d": "Unity版本号判断，500表示5.0.0",
        "p": "command/predefined-macros.html##if UNITY_VERSION &gt;= 500"
    },
    {
        "t": "UNITY_UV_STARTS_AT_TOP",
        "d": "一般此判断当前平台是DX(UV原点在左上角)还是OpenGL(UV原点在左下角)",
        "p": "command/predefined-macros.html#UNITY_UV_STARTS_AT_TOP"
    },
    {
        "t": "UNITY_NO_SCREENSPACE_SHADOWS",
        "d": "定义移动平台不进行Cascaded ScreenSpace Shadow.",
        "p": "command/predefined-macros.html#UNITY_NO_SCREENSPACE_SHADOWS"
    },
    {
        "t": "UNITY_UI_CLIP_RECT",
        "d": "当父级物体有Rect Mask 2D组件时激活.\r\n      需要先手动定义此变体#pragma multi_compile _ UNITY_UI_CLIP_RECT\r\n      同时需要声明：_ClipRect(一个四维向量，四个分量分别表示RectMask2D的左下角点的xy坐标与右上角点的xy坐标.)\r\n      UnityGet2DClipping (float2 position, float4 clipRect)即可实现遮罩.",
        "p": "command/predefined-macros.html#UNITY_UI_CLIP_RECT"
    },
    {
        "t": "UNITY_SHOULD_SAMPLE_SH",
        "d": "是否进行计算SH（光照探针与顶点着色）</p>\r\n    <ul>\r\n      <li>\r\n        <p>当静态与动态Lightmap启用时，此项不激活.</p>\r\n      </li>\r\n      <li>\r\n        <p>当静态与动态Lightmap没有启用时，此项激活.</p>\r\n      </li>\r\n      <li>\r\n        <p>除ForwardBase其它Pass都不激活，每个Pass需要指定UNITY_PASS_FORWARDADD、UNITY_PASS_SHADOWCASTER等.",
        "p": "command/predefined-macros.html#UNITY_SHOULD_SAMPLE_SH"
    },
    {
        "t": "UNITY_SAMPLE_FULL_SH_PER_PIXEL",
        "d": "光照贴图uv和来自SHL2的环境颜色在顶点和像素内插器中共享,在启用静态lightmap和LIGHTPROBE_SH时，在像素着色器中执行完整的SH计算。",
        "p": "command/predefined-macros.html#UNITY_SAMPLE_FULL_SH_PER_PIXEL"
    },
    {
        "t": "HANDLE_SHADOWS_BLENDING_IN_GI",
        "d": "当同时定义了SHADOWS_SCREEN与LIGHTMAP_ON时开启.",
        "p": "command/predefined-macros.html#HANDLE_SHADOWS_BLENDING_IN_GI"
    },
    {
        "t": "UNITY_SHADOW_COORDS(N)",
        "d": "定义一个float4类型的变量_ShadowCoord,语义为第N个TEXCOORD.",
        "p": "command/predefined-macros.html#UNITY_SHADOW_COORDS(N)"
    },
    {
        "t": "V2F_SHADOW_CASTER",
        "d": "用于&quot;LightMode&quot; = &quot;ShadowCaster&quot;中,相当于定义了float4 pos:SV_POSITION.",
        "p": "command/predefined-macros.html#V2F_SHADOW_CASTER"
    },
    {
        "t": "_Int(&quot;Int&quot;, Int) = 1",
        "d": "类型:整型\r\n      Cg/HLSL:int\r\n      取决于在Cg/HLSL中是用float还是int来声明的，如果定义为float则实际使用的就是浮点数，字义为int会被识别为int类型（去小数点直接取整）",
        "p": "command/properties.html#_Int(&quot;Int&quot;, Int) = 1"
    },
    {
        "t": "_Float (&quot;Float&quot;, Float ) = 0",
        "d": "类型:浮点数值\r\n      Cg/HLSL:可根据需要定义不同的浮点精度\r\n      float 32位精度,常用于世界坐标位置以及UV坐标\r\n      half 范围[-6W,6W],常用于本地坐标位置，方向等\r\n      fixed 范围[-2,2],常用于纹理与颜色等低精度的情况",
        "p": "command/properties.html#_Float (&quot;Float&quot;, Float ) = 0"
    },
    {
        "t": "_Slider (&quot;Slider&quot;, Range(0, 1)) = 0",
        "d": "类型:数值滑动条\r\n      本身还是Float类型，只是通过Range(min,max)来控制滑动条的最小值与最大值",
        "p": "command/properties.html#_Slider (&quot;Slider&quot;, Range(0, 1)) = 0"
    },
    {
        "t": "_Color(&quot;Color&quot;, Color) = (1,1,1,1)",
        "d": "类型:颜色属性\r\n      Cg/HLSL:float4/half4/fixed4",
        "p": "command/properties.html#_Color(&quot;Color&quot;, Color) = (1,1,1,1)"
    },
    {
        "t": "_Vector (&quot;Vector&quot;, Vector) = (0,0,0,0)",
        "d": "类型:四维向量\r\n      在Properties中无法定义二维或者三维向量，只能定义四维向量",
        "p": "command/properties.html#_Vector (&quot;Vector&quot;, Vector) = (0,0,0,0)"
    },
    {
        "t": "_MainTex (&quot;Texture&quot;, 2D) = &quot;white&quot; {}",
        "d": "类型:2D纹理\r\n      Cg/HLSL:sampler2D/sampler2D_half/sampler2D_float\r\n      默认值有white、black、gray、bump以及空，空就是white",
        "p": "command/properties.html#_MainTex (&quot;Texture&quot;, 2D) = &quot;white&quot; {}"
    },
    {
        "t": "_MainTex3D (&quot;Texture&quot;, 3D) = &quot;white&quot; {}",
        "d": "类型:3D纹理\r\n      Cg/HLSL:sampler3D/sampler3D_half/sampler3D_float",
        "p": "command/properties.html#_MainTex3D (&quot;Texture&quot;, 3D) = &quot;white&quot; {}"
    },
    {
        "t": "_MainCube (&quot;Texture&quot;, Cube) = &quot;white&quot; {}",
        "d": "类型:立方体纹理\r\n      Cg/HLSL:samplerCUBE/samplerCUBE_half/samplerCUBE_float",
        "p": "command/properties.html#_MainCube (&quot;Texture&quot;, Cube) = &quot;white&quot; {}"
    },
    {
        "t": "[Header(xxx)]",
        "d": "用于在材质面板中当前属性的上方显示标题xxx，注意只支持英文、数字、空格以及下划线",
        "p": "command/properties.html#[Header(xxx)]"
    },
    {
        "t": "[HideInInspector]",
        "d": "在材质面板中隐藏此条属性，在不希望暴露某条属性时可以快速将其隐藏",
        "p": "command/properties.html#[HideInInspector]"
    },
    {
        "t": "[Space(n)]",
        "d": "使材质面板属性之前有间隔，n为间隔的数值大小",
        "p": "command/properties.html#[Space(n)]"
    },
    {
        "t": "[HDR]",
        "d": "标记为属性为高动态范围",
        "p": "command/properties.html#[HDR]"
    },
    {
        "t": "[PowerSlider(3)]",
        "d": "滑条曲率,必须加在range属性前面，用于控制滑动的数值比例",
        "p": "command/properties.html#[PowerSlider(3)]"
    },
    {
        "t": "[IntRange]",
        "d": "必须使用在Range属性之上，以使在材质面板中滑动时只能生成整数",
        "p": "command/properties.html#[IntRange]"
    },
    {
        "t": "[Toggle]",
        "d": "开关,加在数值类型前,可使材质面板中的数值变成开关，0是关，1是开",
        "p": "command/properties.html#[Toggle]"
    },
    {
        "t": "[Enum(Off, 0, On, 1)]",
        "d": "数值枚举,可直接在cg中使用此关键字来替代数字.",
        "p": "command/properties.html#[Enum(Off, 0, On, 1)]"
    },
    {
        "t": "[KeywordEnum (Enum0, Enum1, ..., Enum8)]",
        "d": "关键字枚举,可最多定义8个,需要#pragma multi_compile _ENUM_ENUM0 _ENUM_ENUM1 ...来依次声明变体关键字.",
        "p": "command/properties.html#[KeywordEnum (Enum0, Enum1, ..., Enum8)]"
    },
    {
        "t": "[Enum (UnityEngine.Rendering.CullMode)]",
        "d": "内置枚举,可在Enum()内直接调用Unity内部的枚举.",
        "p": "command/properties.html#[Enum (UnityEngine.Rendering.CullMode)]"
    },
    {
        "t": "[NoScaleOffset]",
        "d": "只能加在纹理属性前，使其隐藏材质面板中的Tiling和Offset",
        "p": "command/properties.html#[NoScaleOffset]"
    },
    {
        "t": "[Normal]",
        "d": "只能加在纹理属性前，标记此纹理是用来接收法线贴图的，当用户指定了非法线的纹理时会在材质面板上进行警告提示",
        "p": "command/properties.html#[Normal]"
    },
    {
        "t": "[Gamma]",
        "d": "Float和Vector属性默认情况下不会进行颜色空间转换，可以通过添加[Gamma]来指明此属性为sRGB值",
        "p": "command/properties.html#[Gamma]"
    },
    {
        "t": "Cull Back | Front | Off",
        "d": "背面剔除,默认值为Back。</p>\r\n    <ul>\r\n      <li>Back：表示剔除背面，也就是显示正面，这也是最常用的设置。</li>\r\n      <li>Front：表示剔除前面，只显示背面。</li>\r\n      <li>Off:表示关闭剔除，也就是正反面都渲染。</li>\r\n    </ul>\r\n    <h2>模板测试</h2>\r\n    <h3>Stencil</h3>\r\n    <p>\r\n      模板缓冲区(StencilBuffer)可以为屏幕上的每个像素点保存一个无符号整数值,这个值的具体意义视程序的具体应用而定.在渲染的过程中,可以用这个值与一个预先设定的参考值相比较,根据比较的结果来决定是否更新相应的像素点的颜色值.这个比较的过程被称为模板测试.\r\n      将StencilBuffer的值与ReadMask与运算，然后与Ref值进行Comp比较，结果为true时进行Pass操作，否则进行Fail操作，操作值写入StencilBuffer前先与WriteMask与运算.\r\n      <span style=\"color:#cc0000;display: block;\"><span class=\"cjk_fallback\">公式：(Ref &amp;amp; ReadMask) Comp\r\n          (StencilBufferValue &amp;amp;\r\n          ReadMask)</span></span>",
        "p": "command/render-state.html#Cull Back | Front | Off"
    },
    {
        "t": "Comp（比较操作）",
        "d": "",
        "p": "command/render-state.html#Comp（比较操作）"
    },
    {
        "t": "模版缓冲区的更新",
        "d": "",
        "p": "command/render-state.html#模版缓冲区的更新"
    },
    {
        "t": "ZTest (Less | Greater | LEqual | GEqual | Equal | NotEqual | Never | Always)",
        "d": "深度测试，拿当前像素的深度值与深度缓冲中的深度值进行比较，默认值为LEqual。可通过在属性中添加枚举UnityEngine.Rendering.CompareFunction",
        "p": "command/render-state.html#ZTest (Less | Greater | LEqual | GEqual | Equal | NotEqual | Never | Always)"
    },
    {
        "t": "ZTest[unity_GUIZTestMode]",
        "d": "unity_GUIZTestMode用于UI材质中，此值默认为LEqual,仅当UI中Canvas模式为Overlay时，值为Always.",
        "p": "command/render-state.html#ZTest[unity_GUIZTestMode]"
    },
    {
        "t": "ZWrite On | Off",
        "d": "深度写入，默认值为On。",
        "p": "command/render-state.html#ZWrite On | Off"
    },
    {
        "t": "Offset Factor, Units",
        "d": "<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\">\r\n            <semantics>\r\n              <mrow>\r\n                <mtext>深度偏移，</mtext>\r\n                <mi>o</mi>\r\n                <mi>f</mi>\r\n                <mi>f</mi>\r\n                <mi>s</mi>\r\n                <mi>e</mi>\r\n                <mi>t</mi>\r\n                <mo>=</mo>\r\n                <mo stretchy=\"false\">(</mo>\r\n                <mi>m</mi>\r\n                <mo>∗</mo>\r\n                <mi>f</mi>\r\n                <mi>a</mi>\r\n                <mi>c</mi>\r\n                <mi>t</mi>\r\n                <mi>o</mi>\r\n                <mi>r</mi>\r\n                <mo stretchy=\"false\">)</mo>\r\n                <mo>+</mo>\r\n                <mo stretchy=\"false\">(</mo>\r\n                <mi>r</mi>\r\n                <mo>∗</mo>\r\n                <mi>u</mi>\r\n                <mi>n</mi>\r\n                <mi>i</mi>\r\n                <mi>t</mi>\r\n                <mi>s</mi>\r\n                <mo stretchy=\"false\">)</mo>\r\n                <mtext>，默认值为</mtext>\r\n                <mn>0</mn>\r\n                <mo separator=\"true\">,</mo>\r\n                <mn>0</mn>\r\n              </mrow>\r\n              <annotation encoding=\"application/x-tex\">深度偏移，offset = (m * factor) + (r * units)，默认值为0,0</annotation>\r\n            </semantics>\r\n          </math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\"\r\n              style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord cjk_fallback\">深度偏移，</span><span\r\n              class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\"\r\n              style=\"margin-right:0.10764em;\">ff</span><span class=\"mord mathnormal\">se</span><span\r\n              class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span\r\n              class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span\r\n            class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span\r\n              class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mspace\"\r\n              style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\"\r\n              style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\"\r\n              style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\"\r\n              style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">a</span><span\r\n              class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\"\r\n              style=\"margin-right:0.02778em;\">or</span><span class=\"mclose\">)</span><span class=\"mspace\"\r\n              style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\"\r\n              style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\"\r\n              style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span\r\n              class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mspace\"\r\n              style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\"\r\n              style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\"\r\n              style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">u</span><span\r\n              class=\"mord mathnormal\">ni</span><span class=\"mord mathnormal\">t</span><span\r\n              class=\"mord mathnormal\">s</span><span class=\"mclose\">)</span><span\r\n              class=\"mord cjk_fallback\">，默认值为</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span\r\n              class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">0</span></span></span></span></p>\r\n    <ul>\r\n      <li>m：指多边形的深度斜率（在光栅化阶段计算得出）中的最大值,多边形越是与近裁剪面平行，m值就越接近0。</li>\r\n      <li>r：表示能产生在窗口坐标系的深度值中可分辨的差异的最小值，r是由具体实现OpenGL的平台指定的一个常量。</li>\r\n    </ul>\r\n    <p>结论：一个大于0的offset会把模型推远，一个小于0的offset会把模型拉近。",
        "p": "command/render-state.html#Offset Factor, Units"
    },
    {
        "t": "ColorMask RGB | A | 0 | R、G、B、A的任意组合",
        "d": "颜色遮罩，默认值为：RGBA，表示写入RGBA四个通道。",
        "p": "command/render-state.html#ColorMask RGB | A | 0 | R、G、B、A的任意组合"
    },
    {
        "t": "说明",
        "d": "源颜色<em>SrcFactor + 目标颜色</em>DstFactor\r\n      颜色混合，源颜色与目标颜色以给定的公式进行混合出最终的新颜色。</p>\r\n    <ul>\r\n      <li>源颜色：当前Shader计算出的颜色。</li>\r\n      <li>目标颜色：已经存在颜色缓存中的颜色。默认值为Blend Off,即表示关闭混合。</li>\r\n    </ul>\r\n    <p>在混合时可以针对某个RT做混合，比如Blend 3 One One,就是对RenderTarget3做混合。",
        "p": "command/render-state.html#说明"
    },
    {
        "t": "Blend SrcFactor DstFactor",
        "d": "SrcFactor为源颜色因子，DstFactor为目标颜色因子，将两者按Op中指定的操作进行混合。",
        "p": "command/render-state.html#Blend SrcFactor DstFactor"
    },
    {
        "t": "Blend SrcFactor DstFactor, SrcFactorA DstFactorA",
        "d": "对RGB和A通道分别做混合操作。",
        "p": "command/render-state.html#Blend SrcFactor DstFactor, SrcFactorA DstFactorA"
    },
    {
        "t": "BlendOp Op",
        "d": "对RGB和A通道分别做混合操作。",
        "p": "command/render-state.html#BlendOp Op"
    },
    {
        "t": "BlendOp OpColor, OpAlpha",
        "d": "对RGB和A通道分别指定混合运算符。",
        "p": "command/render-state.html#BlendOp OpColor, OpAlpha"
    },
    {
        "t": "AlphaToMask On | Off",
        "d": "当值为On时，在使用MSAA时，会根据像素结果将alpha值进行修改多重采样覆盖率，对植被和其他经过alpha测试的着色器非常有用。",
        "p": "command/render-state.html#AlphaToMask On | Off"
    },
    {
        "t": "Blend factors",
        "d": "混合因子",
        "p": "command/render-state.html#Blend factors"
    },
    {
        "t": "Blend Types",
        "d": "常用的几种混合类型",
        "p": "command/render-state.html#Blend Types"
    },
    {
        "t": "Blend operations",
        "d": "混合操作的具体运算符</p>\r\n    <ul>\r\n      <li>Add：源+目标</li>\r\n      <li>Sub：源-目标</li>\r\n      <li>RevSub：目标-源</li>\r\n      <li>Min：源与目标中最小值</li>\r\n      <li>Max：源与目标中最大值</li>\r\n    </ul>\r\n    <p>以下仅用于DX11.1中",
        "p": "command/render-state.html#Blend operations"
    },
    {
        "t": "float4 vertex : POSITION;",
        "d": "顶点的本地坐标",
        "p": "command/semantics.html#float4 vertex : POSITION;"
    },
    {
        "t": "uint vid : SV_VertexID;",
        "d": "顶点的索引ID",
        "p": "command/semantics.html#uint vid : SV_VertexID;"
    },
    {
        "t": "float3 normal : NORMAL;",
        "d": "顶点的法线信息",
        "p": "command/semantics.html#float3 normal : NORMAL;"
    },
    {
        "t": "float4 tangent : TANGENT;",
        "d": "顶点的切线信息",
        "p": "command/semantics.html#float4 tangent : TANGENT;"
    },
    {
        "t": "float4 texcoord : TEXCOORD0;",
        "d": "顶点的UV1信息",
        "p": "command/semantics.html#float4 texcoord : TEXCOORD0;"
    },
    {
        "t": "float4 texcoord1 : TEXCOORD1;",
        "d": "顶点的UV2信息",
        "p": "command/semantics.html#float4 texcoord1 : TEXCOORD1;"
    },
    {
        "t": "float4 texcoord2 : TEXCOORD2;",
        "d": "顶点的UV3信息",
        "p": "command/semantics.html#float4 texcoord2 : TEXCOORD2;"
    },
    {
        "t": "float4 texcoord3 : TEXCOORD3;",
        "d": "顶点的UV4信息",
        "p": "command/semantics.html#float4 texcoord3 : TEXCOORD3;"
    },
    {
        "t": "fixed4 color : COLOR;",
        "d": "顶点的顶点色信息",
        "p": "command/semantics.html#fixed4 color : COLOR;"
    },
    {
        "t": "float4 pos:SV_POSITION;",
        "d": "顶点的齐次裁剪空间下的坐标,默认情况下用POSITION也可以(PS4下不支持)，但是为了支持所有平台，所以最好使用SV_POSITION.",
        "p": "command/semantics.html#float4 pos:SV_POSITION;"
    },
    {
        "t": "TEXCOORD0~N",
        "d": "例如TEXCOORD0、TEXCOORD1、TEXCOORD2...等等，主要用于高精度数据",
        "p": "command/semantics.html#TEXCOORD0~N"
    },
    {
        "t": "COLOR0~N",
        "d": "例如COLOR0、COLOR1、COLOR2...等等，主要用于低精度数据",
        "p": "command/semantics.html#COLOR0~N"
    },
    {
        "t": "float face:VFACE",
        "d": "如果渲染表面朝向摄像机，则Face节点输出正值1，如果远离摄像机，则输出负值-1",
        "p": "command/semantics.html#float face:VFACE"
    },
    {
        "t": "UNITY_VPOS_TYPE screenPos : VPOS",
        "d": "",
        "p": "command/semantics.html#UNITY_VPOS_TYPE screenPos : VPOS"
    },
    {
        "t": "uint vid : SV_VertexID",
        "d": "顶点着色器可以接收具有“顶点编号”作为无符号整数的变量,当需要从纹理或ComputeBuffers中获取额外的顶点数据时比较有用，此语义仅支持#pragma target 3.5及以上",
        "p": "command/semantics.html#uint vid : SV_VertexID"
    },
    {
        "t": "注意事项",
        "d": "1.OpenGL ES2.0支持最多8个\r\n      2.OpenGL ES3.0支持最多16个",
        "p": "command/semantics.html#注意事项"
    },
    {
        "t": "fixed4 color : SV_Target;",
        "d": "默认RenderTarget,也是默认输出的屏幕上的颜色\r\n      同时支持SV_Target1、SV_Target2...等等",
        "p": "command/semantics.html#fixed4 color : SV_Target;"
    },
    {
        "t": "fixed depth : SV_Depth;",
        "d": "通过在片断着色器中输出SV_DEPTH语义可以更改像素的深度值,注意此功能相对会消耗性能，在没有特别需求的情况下尽量不要用",
        "p": "command/semantics.html#fixed depth : SV_Depth;"
    },
    {
        "t": "Tags { &quot;TagName1&quot; = &quot;Value1&quot; &quot;TagName2&quot; = &quot;Value2&quot; }",
        "d": "Tag的语法结构，通过Tags{}来表示需要添加的标识,大括号内可以添加多组Tag（所以才叫Tags嘛）,名称（TagName）和值（Value）是成对成对出现的，并且全部用字符串表示。",
        "p": "command/tags.html#Tags { &quot;TagName1&quot; = &quot;Value1&quot; &quot;TagName2&quot; = &quot;Value2&quot; }"
    },
    {
        "t": "Queue",
        "d": "渲染队列直接影响性能中的重复绘制，合理的队列可极大的提升渲染效率。\r\n      渲染队列数&lt;=2500的对象都被认为是不透明的物体（从前往后渲染），&gt;2500的被认为是半透明物体（从后往前渲染）。\r\n      &quot;Queue&quot; = &quot;Geometry+1&quot; 可通过在值后加数字的方式来改变队列。",
        "p": "command/tags.html#Queue"
    },
    {
        "t": "&quot;Queue&quot; = &quot;Background&quot;",
        "d": "值为1000，此队列的对象最先进行渲染。",
        "p": "command/tags.html#&quot;Queue&quot; = &quot;Background&quot;"
    },
    {
        "t": "&quot;Queue&quot; = &quot;Geometry&quot;",
        "d": "默认值，值为2000，通常用于不透明对象，比如场景中的物件与角色等。",
        "p": "command/tags.html#&quot;Queue&quot; = &quot;Geometry&quot;"
    },
    {
        "t": "&quot;Queue&quot; = &quot;AlphaTest&quot;",
        "d": "值为2450，要么完全透明要么完全不透明，多用于利用贴图来实现边缘透明的效果，也就是美术常说的透贴。",
        "p": "command/tags.html#&quot;Queue&quot; = &quot;AlphaTest&quot;"
    },
    {
        "t": "&quot;Queue&quot; = &quot;Transparent&quot;",
        "d": "值为3000，常用于半透明对象，渲染时从后往前进行渲染，建议需要混合的对象放入此队列。",
        "p": "command/tags.html#&quot;Queue&quot; = &quot;Transparent&quot;"
    },
    {
        "t": "&quot;Queue&quot; = &quot;Overlay&quot;",
        "d": "值为4000,此渲染队列用于叠加效果。最后渲染的东西应该放在这里（例如镜头光晕等）。",
        "p": "command/tags.html#&quot;Queue&quot; = &quot;Overlay&quot;"
    },
    {
        "t": "RenderType",
        "d": "用来区别这个Shader要渲染的对象是属于什么类别的，你可以想像成是我们把各种不同的物体按我们需要的类型来进行分类一样。\r\n      当然你也可以根据需要改成自定义的名称，这样并不会影响到Shader的效果。\r\n      此Tag多用于摄像机的替换材质功能(Camera.SetReplacementShader)。",
        "p": "command/tags.html#RenderType"
    },
    {
        "t": "&quot;RenderType&quot; = &quot;Opaque&quot;",
        "d": "大多数不透明着色器。",
        "p": "command/tags.html#&quot;RenderType&quot; = &quot;Opaque&quot;"
    },
    {
        "t": "&quot;RenderType&quot; = &quot;Transparent&quot;",
        "d": "大多数半透明着色器，比如粒子、特效、字体等。",
        "p": "command/tags.html#&quot;RenderType&quot; = &quot;Transparent&quot;"
    },
    {
        "t": "&quot;RenderType&quot; = &quot;TransparentCutout&quot;",
        "d": "透贴着色器，多用于植被等。",
        "p": "command/tags.html#&quot;RenderType&quot; = &quot;TransparentCutout&quot;"
    },
    {
        "t": "&quot;RenderType&quot; = &quot;Background&quot;",
        "d": "多用于天空盒着色器。",
        "p": "command/tags.html#&quot;RenderType&quot; = &quot;Background&quot;"
    },
    {
        "t": "&quot;RenderType&quot; = &quot;Overlay&quot;",
        "d": "GUI、光晕着色器等。",
        "p": "command/tags.html#&quot;RenderType&quot; = &quot;Overlay&quot;"
    },
    {
        "t": "&quot;RenderType&quot; = &quot;TreeOpaque&quot;",
        "d": "Terrain地形中的树干。",
        "p": "command/tags.html#&quot;RenderType&quot; = &quot;TreeOpaque&quot;"
    },
    {
        "t": "&quot;RenderType&quot; = &quot;TreeTransparentCutout&quot;",
        "d": "Terrain地形中的树叶。",
        "p": "command/tags.html#&quot;RenderType&quot; = &quot;TreeTransparentCutout&quot;"
    },
    {
        "t": "&quot;RenderType&quot; = &quot;TreeBillboard&quot;",
        "d": "Terrain地形中的永对面树。",
        "p": "command/tags.html#&quot;RenderType&quot; = &quot;TreeBillboard&quot;"
    },
    {
        "t": "&quot;RenderType&quot; = &quot;Grass&quot;",
        "d": "Terrain地形中的草。",
        "p": "command/tags.html#&quot;RenderType&quot; = &quot;Grass&quot;"
    },
    {
        "t": "&quot;RenderType&quot; = &quot;GrassBillboard&quot;",
        "d": "Terrain地形中的永对面草。",
        "p": "command/tags.html#&quot;RenderType&quot; = &quot;GrassBillboard&quot;"
    },
    {
        "t": "DisableBatching",
        "d": "在利用Shader在模型的顶点本地坐标下做一些位移动画，而当此模型有批处理时会出现效果不正确的情况，这是因为批处理会将所有模型转换为世界坐标空间，因此“本地坐标空间”将丢失。",
        "p": "command/tags.html#DisableBatching"
    },
    {
        "t": "&quot;DisableBatching&quot; = &quot;True&quot;",
        "d": "禁用批处理。",
        "p": "command/tags.html#&quot;DisableBatching&quot; = &quot;True&quot;"
    },
    {
        "t": "&quot;DisableBatching&quot; = &quot;False&quot;",
        "d": "不禁用批处理。",
        "p": "command/tags.html#&quot;DisableBatching&quot; = &quot;False&quot;"
    },
    {
        "t": "&quot;DisableBatching&quot; = &quot;LODFading&quot;",
        "d": "仅当LOD激活时禁用批处理。",
        "p": "command/tags.html#&quot;DisableBatching&quot; = &quot;LODFading&quot;"
    },
    {
        "t": "ForceNoShadowCasting",
        "d": "是否强制关闭投射阴影。",
        "p": "command/tags.html#ForceNoShadowCasting"
    },
    {
        "t": "&quot;ForceNoShadowCasting&quot; = &quot;True&quot;",
        "d": "强制关闭阴影投射。",
        "p": "command/tags.html#&quot;ForceNoShadowCasting&quot; = &quot;True&quot;"
    },
    {
        "t": "&quot;ForceNoShadowCasting&quot; = &quot;False&quot;",
        "d": "不关闭阴影投射。",
        "p": "command/tags.html#&quot;ForceNoShadowCasting&quot; = &quot;False&quot;"
    },
    {
        "t": "IgnoreProjector",
        "d": "是否忽略Projector投影器的影响。",
        "p": "command/tags.html#IgnoreProjector"
    },
    {
        "t": "&quot;IgnoreProjector&quot; = &quot;True&quot;",
        "d": "不受投影器影响。",
        "p": "command/tags.html#&quot;IgnoreProjector&quot; = &quot;True&quot;"
    },
    {
        "t": "&quot;IgnoreProjector&quot; = &quot;False&quot;",
        "d": "受投影器影响。",
        "p": "command/tags.html#&quot;IgnoreProjector&quot; = &quot;False&quot;"
    },
    {
        "t": "CanUseSpriteAtlas",
        "d": "是否可用于打包图集的精灵。",
        "p": "command/tags.html#CanUseSpriteAtlas"
    },
    {
        "t": "&quot;CanUseSpriteAtlas&quot; = &quot;True&quot;",
        "d": "支持精灵打包图集。",
        "p": "command/tags.html#&quot;CanUseSpriteAtlas&quot; = &quot;True&quot;"
    },
    {
        "t": "&quot;CanUseSpriteAtlas&quot; = &quot;False&quot;",
        "d": "不支持精灵打包图集。",
        "p": "command/tags.html#&quot;CanUseSpriteAtlas&quot; = &quot;False&quot;"
    },
    {
        "t": "PreviewType",
        "d": "定义材质面板中的预览的模型显示,默认不写或者不为Plane与Skybox时则为圆球。",
        "p": "command/tags.html#PreviewType"
    },
    {
        "t": "&quot;PreviewType&quot; = &quot;Plane&quot;",
        "d": "平面。",
        "p": "command/tags.html#&quot;PreviewType&quot; = &quot;Plane&quot;"
    },
    {
        "t": "&quot;PreviewType&quot; = &quot;Skybox&quot;",
        "d": "天空盒。",
        "p": "command/tags.html#&quot;PreviewType&quot; = &quot;Skybox&quot;"
    },
    {
        "t": "PerformanceChecks",
        "d": "是否对shader在当前平台进行性能检测，并在材质面板进行警告提示",
        "p": "command/tags.html#PerformanceChecks"
    },
    {
        "t": "&quot;PerformanceChecks&quot; = &quot;True&quot;",
        "d": "开启性能检测提示",
        "p": "command/tags.html#&quot;PerformanceChecks&quot; = &quot;True&quot;"
    },
    {
        "t": "&quot;PerformanceChecks&quot; = &quot;False&quot;",
        "d": "关闭性能检测提示",
        "p": "command/tags.html#&quot;PerformanceChecks&quot; = &quot;False&quot;"
    },
    {
        "t": "ForwardBase",
        "d": "用于前向渲染路径，支持环境光、主像素光、球谐光照与烘焙光照。",
        "p": "command/tags.html#ForwardBase"
    },
    {
        "t": "ForwardAdd",
        "d": "用于前向渲染路径，支持额外的逐像素光照，每盏灯一个Pass。",
        "p": "command/tags.html#ForwardAdd"
    },
    {
        "t": "Deferred",
        "d": "用于延迟渲染。",
        "p": "command/tags.html#Deferred"
    },
    {
        "t": "ShadowCaster",
        "d": "深度渲染与Shadowmap。",
        "p": "command/tags.html#ShadowCaster"
    },
    {
        "t": "MotionVectors",
        "d": "运动矢量。",
        "p": "command/tags.html#MotionVectors"
    },
    {
        "t": "PrepassBase",
        "d": "旧版延迟渲染，法线与高光处理。",
        "p": "command/tags.html#PrepassBase"
    },
    {
        "t": "PrepassFinal",
        "d": "旧版延迟渲染，最终颜色。",
        "p": "command/tags.html#PrepassFinal"
    },
    {
        "t": "Vertex",
        "d": "旧版顶点渲染。",
        "p": "command/tags.html#Vertex"
    },
    {
        "t": "VertexLMRGBM",
        "d": "旧版顶点渲染，支持烘焙光照。",
        "p": "command/tags.html#VertexLMRGBM"
    },
    {
        "t": "VertexLM",
        "d": "旧版顶点渲染，支持烘焙光照，解码为双LDR。",
        "p": "command/tags.html#VertexLM"
    },
    {
        "t": "Always",
        "d": "永远渲染。",
        "p": "command/tags.html#Always"
    },
    {
        "t": "UNITY_MATRIX_MVP",
        "d": "模型空间&gt;&gt;投影空间",
        "p": "command/transformations.html#UNITY_MATRIX_MVP"
    },
    {
        "t": "UNITY_MATRIX_MV",
        "d": "模型空间&gt;&gt;观察空间",
        "p": "command/transformations.html#UNITY_MATRIX_MV"
    },
    {
        "t": "UNITY_MATRIX_V",
        "d": "视图空间",
        "p": "command/transformations.html#UNITY_MATRIX_V"
    },
    {
        "t": "UNITY_MATRIX_P",
        "d": "投影空间",
        "p": "command/transformations.html#UNITY_MATRIX_P"
    },
    {
        "t": "UNITY_MATRIX_VP",
        "d": "视图空间&gt;投影空间",
        "p": "command/transformations.html#UNITY_MATRIX_VP"
    },
    {
        "t": "unity_ObjectToWorld",
        "d": "本地空间&gt;&gt;世界空间",
        "p": "command/transformations.html#unity_ObjectToWorld"
    },
    {
        "t": "unity_WorldToObject",
        "d": "世界空间&gt;本地空间",
        "p": "command/transformations.html#unity_WorldToObject"
    },
    {
        "t": "unity_WorldToCamera",
        "d": "世界空间到观察空间的矩阵",
        "p": "command/transformations.html#unity_WorldToCamera"
    },
    {
        "t": "unity_CameraToWorld",
        "d": "观察空间到世界空间的矩阵",
        "p": "command/transformations.html#unity_CameraToWorld"
    },
    {
        "t": "UnityObjectToClipPos(v.vertex)",
        "d": "将模型空间下的顶点转换到齐次裁剪空间",
        "p": "command/transformations.html#UnityObjectToClipPos(v.vertex)"
    },
    {
        "t": "UnityObjectToWorldNormal(v.normal)",
        "d": "将模型空间下的法线转换到世界空间(已归一化)",
        "p": "command/transformations.html#UnityObjectToWorldNormal(v.normal)"
    },
    {
        "t": "UnityObjectToWorldDir (v.tangent)",
        "d": "将模型空间下的切线转换到世界空间(已归一化)",
        "p": "command/transformations.html#UnityObjectToWorldDir (v.tangent)"
    },
    {
        "t": "UnityWorldSpaceLightDir (i.worldPos)",
        "d": "世界空间下顶点到灯光方向的向量(未归一化)",
        "p": "command/transformations.html#UnityWorldSpaceLightDir (i.worldPos)"
    },
    {
        "t": "UnityWorldSpaceViewDir (i.worldPos)",
        "d": "世界空间下顶点到视线方向的向量(未归一化)",
        "p": "command/transformations.html#UnityWorldSpaceViewDir (i.worldPos)"
    },
    {
        "t": "平移矩阵",
        "d": "",
        "p": "command/transformations.html#平移矩阵"
    },
    {
        "t": "缩放矩阵",
        "d": "",
        "p": "command/transformations.html#缩放矩阵"
    },
    {
        "t": "旋转矩阵(X轴)",
        "d": "",
        "p": "command/transformations.html#旋转矩阵(X轴)"
    },
    {
        "t": "旋转矩阵(Y轴)",
        "d": "",
        "p": "command/transformations.html#旋转矩阵(Y轴)"
    },
    {
        "t": "旋转矩阵(Z轴)",
        "d": "",
        "p": "command/transformations.html#旋转矩阵(Z轴)"
    }
]